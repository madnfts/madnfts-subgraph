# Schemas & shared

enum ContractType {
  Minimal
  Basic
  Whitelist
  Lazy
}

type _Schema_ @fulltext(
  name: "ERC721TokenSearch"
  language: en
  algorithm: rank
  include: [
    { entity: "ERC721Token", fields: [{ name: "name" }, { name: "description" }] },
    { entity: "ERC1155Token", fields: [{ name: "name" }, { name: "description" }] }
  ]
)

# interface

interface Event {
  id: ID!
  transaction: Transaction!
  block: Block!
  emitter: Account!
  timestamp: BigInt!
}

interface TimeUnit {
  id: ID!
  epoch: BigInt!
  orders: [Order!]!
  blocks: [Block!]
  transactions: [Transaction!]!
}

interface ERC721Volume {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC721Contract!
  nftTransactions: [ERC721NftTransaction!]!
  timeUnit: TimeUnit!
}

interface ERC1155Volume {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC1155Contract!
  nftTransactions: [ERC1155NftTransaction!]!
  timeUnit: TimeUnit!
}

# Common

type Account @entity {
  id: Bytes!
  asERC721: ERC721Contract
  ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
  ERC721operatorOwner: [ERC721Operator!]! @derivedFrom(field: "owner")
  ERC721operatorOperator: [ERC721Operator!]! @derivedFrom(field: "operator")
  ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
  ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
  asERC1155: ERC1155Contract
  ERC1155balances: [ERC1155Balance!]! @derivedFrom(field: "account")
  ERC1155operatorOwner: [ERC1155Operator!]! @derivedFrom(field: "owner")
  ERC1155operatorOperator: [ERC1155Operator!]! @derivedFrom(field: "operator")
  ERC1155transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "from")
  ERC1155transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "to")
  ERC1155transferOperatorEvent: [ERC1155Transfer!]! @derivedFrom(field: "operator")
  events: [Event!]! @derivedFrom(field: "emitter")
}

type Splitter @entity {
  id: ID!
  owner: Account
  payees: [Bytes!]!
  percents: [BigInt!]
  ERC721contracts: [ERC721Contract!]! @derivedFrom(field: "splitter")
  ERC1155contracts: [ERC1155Contract!]! @derivedFrom(field: "splitter")
}

type Attribute @entity {
  id: ID!
  displayType: String
  traitType: String
  value: String
  maxValue: String
}

type File @entity {
  id: ID!
  displayType: String
  traitType: String
  value: String
}

type Tag @entity {
  id: ID!
  value: String
}

type Minute implements TimeUnit @entity {
  id: ID!
  epoch: BigInt!
  orders: [Order!]! @derivedFrom(field: "minute")
  blocks: [Block!] @derivedFrom(field: "minute")
  transactions: [Transaction!]! @derivedFrom(field: "minute")
}

type Hour implements TimeUnit @entity {
  id: ID!
  epoch: BigInt!
  orders: [Order!]! @derivedFrom(field: "hour")
  blocks: [Block!] @derivedFrom(field: "hour")
  transactions: [Transaction!]! @derivedFrom(field: "hour")
}

type Day implements TimeUnit @entity {
  id: ID!
  epoch: BigInt!
  orders: [Order!]! @derivedFrom(field: "day")
  blocks: [Block!] @derivedFrom(field: "day")
  transactions: [Transaction!]! @derivedFrom(field: "day")
}

type Week implements TimeUnit @entity {
  id: ID!
  epoch: BigInt!
  orders: [Order!]! @derivedFrom(field: "week")
  blocks: [Block!] @derivedFrom(field: "week")
  transactions: [Transaction!]! @derivedFrom(field: "week")
  # volume: Volume! @derivedFrom(field: "timeUnit")
}

type Order @entity {
  id: ID!
  maker: Account
  taker: Account
  # paymentToken: Erc20Token!
  sale: Sale!
  block: Block!
  transaction: Transaction!
  minute: Minute!
  hour: Hour!
  day: Day!
  week: Week!
}

type Sale @entity {
  id: ID!
  # token: Erc20Token
  orders: [Order!]! @derivedFrom(field: "sale")
  block: Block!
  transaction: Transaction!
  minute: Minute!
  hour: Hour!
  day: Day!
  week: Week!
}

type Block @entity {
  id: ID!
  timestamp: BigInt!
  number: BigInt!
  events: [Event!]! @derivedFrom(field: "block")
  transactions: [Transaction!] @derivedFrom(field: "block")
  orders: [Order!] @derivedFrom(field: "block")
  minute: Minute
  hour: Hour
  day: Day
  week: Week
}

# ERC721

type ERC721Contract @entity(immutable: true) {
  id: Bytes!
  type: ContractType!
  name: String
  symbol: String
  baseUri: String
  timestamp: BigInt
  maxSupply: Int
  mintPrice: BigInt
  floorPrice: BigInt
  lastPrice: BigInt
  volume: BigInt
  paused: Boolean
  disabled: Boolean
  owner: Account
  royalties: BigInt
  splitter: Splitter!
  tokens: [ERC721Token!]! @derivedFrom(field: "contract")
  operators: [ERC721Operator!]! @derivedFrom(field: "contract")
  transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}

type ERC721Token @entity {
  id: ID!
  tokenId: BigInt
  uri: String!
  name: String
  symbol: String
  description: String
  image: String
  category: Int
  unlockableUrl: String
  externalUrl: String
  explicitContent: Boolean
  price: BigInt
  lastPrice: BigInt
  volume: BigInt
  timestamp: BigInt
  contract: ERC721Contract!
  owner: Account!
  approved: Account
  tags: [Tag!]
  attributes: [Attribute!]
  files: [File!]
  transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
}

type ERC721Operator @entity {
  id: ID!
  contract: ERC721Contract!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

type ERC721Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  block: Block!
  timestamp: BigInt!
  contract: ERC721Contract!
  token: ERC721Token!
  from: Account!
  to: Account!
}

type ERC721NftTransaction @entity {
  id: ID!
  timestamp: BigInt!
  block: Block!
  from: Account
  to: Account
  order: Order
  contract: ERC721Contract!
  sale: Sale
  # events: [Event!]! @derivedFrom(field: "transaction")
  minute: Minute!
  hour: Hour!
  day: Day!
  week: Week!
  minuteVolume: ERC721MinuteVolume!
  hourVolume: ERC721HourVolume!
  dayVolume: ERC721DayVolume!
  weekVolume: ERC721WeekVolume!
}

type ERC721MinuteVolume implements ERC721Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC721Contract!
  nftTransactions: [ERC721NftTransaction!]! @derivedFrom(field: "minuteVolume")
  timeUnit: TimeUnit!
}

type ERC721HourVolume implements ERC721Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC721Contract!
  nftTransactions: [ERC721NftTransaction!]! @derivedFrom(field: "hourVolume")
  timeUnit: TimeUnit!
}

type ERC721DayVolume implements ERC721Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC721Contract!
  nftTransactions: [ERC721NftTransaction!]! @derivedFrom(field: "dayVolume")
  timeUnit: TimeUnit!
}

type ERC721WeekVolume implements ERC721Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC721Contract!
  nftTransactions: [ERC721NftTransaction!]! @derivedFrom(field: "weekVolume")
  timeUnit: TimeUnit!
}

# ERC1155

type ERC1155Contract @entity(immutable: true) {
  id: Bytes!
  type: ContractType!
  name: String
  symbol: String
  owner: Account
  baseUri: String
  timestamp: BigInt
  maxSupply: Int
  mintPrice: BigInt
  floorPrice: BigInt
  lastPrice: BigInt
  volume: BigInt
  paused: Boolean
  disabled: Boolean
  supportsMetadata: Boolean
  royalties: BigInt
  splitter: Splitter!
  tokens: [ERC1155Token!]! @derivedFrom(field: "contract")
  balances: [ERC1155Balance!]! @derivedFrom(field: "contract")
  operators: [ERC1155Operator!]! @derivedFrom(field: "contract")
  transfers: [ERC1155Transfer!]! @derivedFrom(field: "contract")
}

type ERC1155Token @entity {
  id: ID!
  tokenId: BigInt
  uri: String!
  name: String
  symbol: String
  description: String
  image: String
  category: Int
  unlockableUrl: String
  externalUrl: String
  explicitContent: Boolean
  price: BigInt
  lastPrice: BigInt
  volume: BigInt
  totalSupply: ERC1155Balance!
  timestamp: BigInt
  contract: ERC1155Contract!
  tags: [Tag!]
  attributes: [Attribute!]
  files: [File!]
  balances: [ERC1155Balance!]! @derivedFrom(field: "token")
  transfers: [ERC1155Transfer!]! @derivedFrom(field: "token")
}

type ERC1155Balance @entity {
  id: ID!
  contract: ERC1155Contract!
  token: ERC1155Token!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  timestamp: BigInt
  transferFromEvent: [ERC1155Transfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ERC1155Transfer!]! @derivedFrom(field: "toBalance")
}

type ERC1155Operator @entity {
  id: ID!
  contract: ERC1155Contract!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

type ERC1155Transfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  block: Block!
  contract: ERC1155Contract!
  token: ERC1155Token!
  operator: Account!
  from: Account
  fromBalance: ERC1155Balance
  to: Account
  toBalance: ERC1155Balance
  value: BigDecimal!
  valueExact: BigInt!
}

type ERC1155NftTransaction @entity {
  id: ID!
  timestamp: BigInt!
  block: Block!
  from: Account
  to: Account
  order: Order
  contract: ERC1155Contract!
  sale: Sale
  # events: [Event!]! @derivedFrom(field: "transaction")
  minute: Minute!
  hour: Hour!
  day: Day!
  week: Week!
  minuteVolume: ERC1155MinuteVolume!
  hourVolume: ERC1155HourVolume!
  dayVolume: ERC1155DayVolume!
  weekVolume: ERC1155WeekVolume!
}

type ERC1155MinuteVolume implements ERC1155Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC1155Contract!
  nftTransactions: [ERC1155NftTransaction!]! @derivedFrom(field: "minuteVolume")
  timeUnit: TimeUnit!
}

type ERC1155HourVolume implements ERC1155Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC1155Contract!
  nftTransactions: [ERC1155NftTransaction!]! @derivedFrom(field: "hourVolume")
  timeUnit: TimeUnit!
}

type ERC1155DayVolume implements ERC1155Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC1155Contract!
  nftTransactions: [ERC1155NftTransaction!]! @derivedFrom(field: "dayVolume")
  timeUnit: TimeUnit!
}

type ERC1155WeekVolume implements ERC1155Volume @entity {
  id: ID!
  amount: BigInt!
  transactionAmount: BigInt!
  contract: ERC1155Contract!
  nftTransactions: [ERC1155NftTransaction!]! @derivedFrom(field: "weekVolume")
  timeUnit: TimeUnit!
}

# Exchange

type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  block: Block!
  events: [Event!]! @derivedFrom(field: "transaction")
  minute: Minute
  hour: Hour
  day: Day
  week: Week
}
